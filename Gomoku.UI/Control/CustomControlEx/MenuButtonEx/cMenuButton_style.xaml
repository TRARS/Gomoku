<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:local="clr-namespace:Gomoku.UI.Control.CustomControlEx.MenuButtonEx"
                    xmlns:behavior="clr-namespace:Gomoku.Core.Helper.Behavior;assembly=Gomoku.Core" 
                    xmlns:translationaleffect="clr-namespace:Gomoku.UI.Control.EffectEx.TranslationalEffect">
    
    <local:cMenuButton_converter_clickpos2xy x:Key="cMenuButton_converter_clickpos2xy"/>
    <local:cMenuButton_converter_size2brush x:Key="cMenuButton_converter_size2brush"/>
    <local:cMenuButton_converter_opacity2scale x:Key="cMenuButton_converter_opacity2scale"/>
    <local:cMenuButton_converter_cornerradius2double x:Key="cMenuButton_converter_cornerradius2double"/>
    <local:cMenuButton_converter_size2rect x:Key="cMenuButton_converter_size2rect"/>
    <local:cMenuButton_converter_minradius x:Key="cMenuButton_converter_minradius"/>

    <local:cMenuButton_converter_anm2radius x:Key="cMenuButton_converter_anm2radius"/>
    <local:cMenuButton_converter_thickness2margin x:Key="cMenuButton_converter_thickness2margin"/>
    
    <Style TargetType="{x:Type local:cMenuButton}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="MinWidth" Value="30"/>
        <Setter Property="MinHeight" Value="25"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0"/>

        <Style.Resources>
            <!--样式1-->
            <ControlTemplate x:Key="Noamal" TargetType="{x:Type local:cMenuButton}">
                <Border x:Name="border"
                        Background="{TemplateBinding Background}" 
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding BorderCornerRadius}"
                        ClipToBounds="True"
                        RenderTransformOrigin="0.5,0.5">
                    <!--边框染色-->
                    <Border.BorderBrush>
                        <MultiBinding Converter="{StaticResource cMenuButton_converter_size2brush}"
                                      ConverterParameter="0.15">
                            <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}"/>
                            <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
                        </MultiBinding>
                    </Border.BorderBrush>
                    <!--旋转-->
                    <Border.RenderTransform>
                        <TransformGroup>
                            <RotateTransform Angle="0"/>
                        </TransformGroup>
                    </Border.RenderTransform>
 
                    <!--获取点击坐标用-->
                    <i:Interaction.Behaviors>
                        <behavior:GetMouseLeftButtonDownPosBehavior Target="{Binding RelativeSource={RelativeSource TemplatedParent}}"/>
                        <!--<behavior:GetMouseEnterPosBehavior Target="{Binding RelativeSource={RelativeSource TemplatedParent}}"/>-->
                    </i:Interaction.Behaviors>

                    <Grid IsHitTestVisible="False">
                        <!--裁剪-->
                        <Grid.Clip>
                            <RectangleGeometry RadiusX="{Binding BorderCornerRadius, 
                                                                 RelativeSource={RelativeSource TemplatedParent}, 
                                                                 Converter={StaticResource cMenuButton_converter_cornerradius2double}}" 
                                               RadiusY="{Binding BorderCornerRadius, 
                                                                 RelativeSource={RelativeSource TemplatedParent}, 
                                                                 Converter={StaticResource cMenuButton_converter_cornerradius2double}}">
                                <RectangleGeometry.Rect>
                                    <MultiBinding Converter="{StaticResource cMenuButton_converter_size2rect}">
                                        <Binding Path="ActualWidth" ElementName="border"/>
                                        <Binding Path="ActualHeight" ElementName="border"/>
                                        <Binding Path="BorderThickness" ElementName="border"/>
                                    </MultiBinding>
                                </RectangleGeometry.Rect>
                            </RectangleGeometry>
                        </Grid.Clip>

                        <!--圆盘-->
                        <Ellipse x:Name="circle_ellipse" 
                                 Height="{Binding ActualWidth, RelativeSource={RelativeSource Self}}"
                                 HorizontalAlignment="Center"
                                 VerticalAlignment="Center"
                                 Opacity="1"
                                 Fill="LightSlateGray" RenderTransformOrigin="0.5,0.5">
                            <Ellipse.Width>
                                <MultiBinding Converter="{StaticResource cMenuButton_converter_minradius}">
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="BorderThickness" ElementName="border"/>
                                </MultiBinding>
                            </Ellipse.Width>
                            <Ellipse.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleY="{Binding ScaleX, RelativeSource={RelativeSource Self}}" >
                                        <ScaleTransform.ScaleX>
                                            <MultiBinding Converter="{StaticResource cMenuButton_converter_opacity2scale}">
                                                <Binding Path="Opacity" Mode="OneWay" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Ellipse}, AncestorLevel=1}" />
                                                <Binding Path="ActualWidth" Mode="OneWay" RelativeSource="{RelativeSource TemplatedParent}" />
                                                <Binding Path="ActualHeight" Mode="OneWay" RelativeSource="{RelativeSource TemplatedParent}" />
                                            </MultiBinding>
                                        </ScaleTransform.ScaleX>
                                    </ScaleTransform>
                                    <TranslateTransform>
                                        <TranslateTransform.X>
                                            <MultiBinding Converter="{StaticResource cMenuButton_converter_clickpos2xy}">
                                                <Binding Path="(local:cMenuButton.ClickPos).X" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                <Binding Path="ActualWidth" ElementName="border"/>
                                            </MultiBinding>
                                        </TranslateTransform.X>
                                        <TranslateTransform.Y>
                                            <MultiBinding Converter="{StaticResource cMenuButton_converter_clickpos2xy}">
                                                <Binding Path="(local:cMenuButton.ClickPos).Y" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                <Binding Path="ActualHeight" ElementName="border"/>
                                            </MultiBinding>
                                        </TranslateTransform.Y>
                                    </TranslateTransform>
                                </TransformGroup>
                            </Ellipse.RenderTransform>
                            <Ellipse.Effect>
                                <translationaleffect:TranslationalEffect Threshold="0" />
                            </Ellipse.Effect>
                        </Ellipse>

                        <!--文本-->
                        <Border x:Name="contentBorder" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                Background="Transparent"
                                CornerRadius="{TemplateBinding BorderCornerRadius}"
                                Margin="2">
                            <TextBlock x:Name="contentText" Text="{Binding Text}" HorizontalAlignment="Center" VerticalAlignment="Center"
                                       Foreground="#E9E9E9" Margin="4,0,4,0"
                                       RenderTransformOrigin="0.5,0.5">
                                <TextBlock.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="{Binding ScaleX,RelativeSource={RelativeSource Self}}"/>
                                    </TransformGroup>
                                </TextBlock.RenderTransform>
                            </TextBlock>
                        </Border>
                    </Grid>
                </Border>

                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" TargetName="contentBorder" Value="Transparent"/>
                        <Setter Property="Foreground" TargetName="contentText" Value="White"/>
                        <!--文本投影-->
                        <Setter Property="Effect" TargetName="contentBorder">
                            <Setter.Value>
                                <DropShadowEffect ShadowDepth="0" BlurRadius="0" Color="White"/>
                            </Setter.Value>
                        </Setter>
                        
                        <Trigger.EnterActions>
                            <!--文本放大-->
                            <BeginStoryboard>
                                <Storyboard FillBehavior="HoldEnd">
                                    <DoubleAnimation Storyboard.TargetName="contentText"
                                                     Storyboard.TargetProperty="(TextBlock.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                                     To="1.05" 
                                                     Duration="0:0:0.1" />
                                </Storyboard>
                            </BeginStoryboard>

                            <!--文本投影呼吸-->
                            <BeginStoryboard x:Name="textblockAnm">
                                <Storyboard RepeatBehavior="Forever">
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Effect.BlurRadius" 
                                                                   Storyboard.TargetName="contentBorder">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:1.0" Value="8"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:1.5" Value="8"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:3.5" Value="0"/>
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                            
                            <!--边框光照滚动-->
                            <BeginStoryboard x:Name="borderAnm">
                                <Storyboard RepeatBehavior="Forever">
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(BorderBrush).(GradientBrush.GradientStops)[0].(GradientStop.Color)" Storyboard.TargetName="border">
                                        <EasingColorKeyFrame KeyTime="0:0:0.0" Value="#FF23FFE1"/>
                                    </ColorAnimationUsingKeyFrames>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(BorderBrush).(GradientBrush.GradientStops)[1].(GradientStop.Color)" Storyboard.TargetName="border">
                                        <EasingColorKeyFrame KeyTime="0:0:0.0" Value="LightYellow"/>
                                    </ColorAnimationUsingKeyFrames>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(BorderBrush).(GradientBrush.GradientStops)[2].(GradientStop.Color)" Storyboard.TargetName="border">
                                        <EasingColorKeyFrame KeyTime="0:0:0.0" Value="#FFFF6BE1"/>
                                    </ColorAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(BorderBrush).(Transform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="border">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="360">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <ExponentialEase EasingMode="EaseInOut"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                        <EasingDoubleKeyFrame KeyTime="0:0:1.0" Value="180">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <ExponentialEase EasingMode="EaseInOut"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                        <EasingDoubleKeyFrame KeyTime="0:0:1.5" Value="0">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <ExponentialEase EasingMode="EaseInOut"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                            
                            <!--边框抖动-->
                            <BeginStoryboard x:Name="borderAnm1">
                                <Storyboard FillBehavior="Stop">
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)" Storyboard.TargetName="border">
                                        <EasingDoubleKeyFrame KeyTime="0:0:1.0" Value="0">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <local:CustomEasingFunction EasingMode="EaseIn"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                        <EasingDoubleKeyFrame KeyTime="0:0:1.05" Value="-2">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <local:CustomEasingFunction EasingMode="EaseIn"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                        <EasingDoubleKeyFrame KeyTime="0:0:1.15" Value="2">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <local:CustomEasingFunction EasingMode="EaseIn"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                        <EasingDoubleKeyFrame KeyTime="0:0:1.25" Value="-2">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <local:CustomEasingFunction EasingMode="EaseIn"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                        <EasingDoubleKeyFrame KeyTime="0:0:1.35" Value="2">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <local:CustomEasingFunction EasingMode="EaseIn"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                        <EasingDoubleKeyFrame KeyTime="0:0:1.40" Value="0">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <local:CustomEasingFunction EasingMode="EaseIn"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <!--删除动画-->
                            <RemoveStoryboard BeginStoryboardName="textblockAnm"/>
                            <RemoveStoryboard BeginStoryboardName="borderAnm"/>
                            <RemoveStoryboard BeginStoryboardName="borderAnm1"/>
                            
                            <!--文本复原-->
                            <BeginStoryboard>
                                <Storyboard FillBehavior="HoldEnd">
                                    <DoubleAnimation Storyboard.TargetProperty="(TextBlock.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                                     Storyboard.TargetName="contentText"
                                                     To="1" 
                                                     Duration="0:0:0.1"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.ExitActions>
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Trigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard FillBehavior="Stop">
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" 
                                                                   Storyboard.TargetName="circle_ellipse">
                                        <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:1.2" Value="0"/>
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Opacity" TargetName="border" Value="0.3"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <!--样式2 未实现-->
            <ControlTemplate x:Key="Custom" TargetType="{x:Type local:cMenuButton}">
                <Border x:Name="border"
                        Background="{TemplateBinding Background}" 
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding BorderCornerRadius}"
                        ClipToBounds="True"
                        RenderTransformOrigin="0.5,0.5">
                    <!--资源防报错2-->
                    <Border.Resources>
                        <EllipseGeometry x:Key="path_ellipse_data"  
                                         RadiusY="{Binding RadiusX, RelativeSource={RelativeSource Self}}"
                                         Center="{Binding Path=(local:cMenuButton.ClickPos), RelativeSource={RelativeSource TemplatedParent}}">
                            <EllipseGeometry.RadiusX>
                                <MultiBinding Converter="{StaticResource cMenuButton_converter_anm2radius}">
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="BorderThickness" ElementName="border"/>
                                    <Binding Path="Opacity" Mode="OneWay" ElementName="path_ellipse"/>
                                </MultiBinding>
                            </EllipseGeometry.RadiusX>
                        </EllipseGeometry>
                    </Border.Resources>
                    <!--边框染色-->
                    <Border.BorderBrush>
                        <MultiBinding Converter="{StaticResource cMenuButton_converter_size2brush}"
                                      ConverterParameter="0.15">
                            <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}"/>
                            <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
                        </MultiBinding>
                    </Border.BorderBrush>
                    <!--旋转-->
                    <Border.RenderTransform>
                        <TransformGroup>
                            <RotateTransform Angle="0"/>
                        </TransformGroup>
                    </Border.RenderTransform>

                    <!--获取点击坐标用-->
                    <i:Interaction.Behaviors>
                        <behavior:GetMouseLeftButtonDownPosBehavior Target="{Binding RelativeSource={RelativeSource TemplatedParent}}"/>
                    </i:Interaction.Behaviors>

                    <Grid>
                        <!--裁剪-->
                        <Grid.Clip>
                            <RectangleGeometry RadiusX="{Binding BorderCornerRadius, 
                                                                 RelativeSource={RelativeSource TemplatedParent}, 
                                                                 Converter={StaticResource cMenuButton_converter_cornerradius2double}}" 
                                               RadiusY="{Binding BorderCornerRadius, 
                                                                 RelativeSource={RelativeSource TemplatedParent}, 
                                                                 Converter={StaticResource cMenuButton_converter_cornerradius2double}}">
                                <RectangleGeometry.Rect>
                                    <MultiBinding Converter="{StaticResource cMenuButton_converter_size2rect}">
                                        <Binding Path="ActualWidth" ElementName="border"/>
                                        <Binding Path="ActualHeight" ElementName="border"/>
                                        <Binding Path="BorderThickness" ElementName="border"/>
                                    </MultiBinding>
                                </RectangleGeometry.Rect>
                            </RectangleGeometry>
                        </Grid.Clip>

                        <!--圆盘-->
                        <Path x:Name="path_ellipse" 
                              Fill="LightSlateGray"
                              Width="{Binding ActualWidth, ElementName=border}"
                              Height="{Binding ActualHeight, ElementName=border}"
                              Margin="{Binding BorderThickness, ElementName=border, Converter={StaticResource cMenuButton_converter_thickness2margin}}"
                              Data="{StaticResource path_ellipse_data}">
                            <Path.Effect>
                                <translationaleffect:TranslationalEffect Threshold="0"/>
                            </Path.Effect>
                        </Path>

                        <!--文本-->
                        <Border x:Name="contentBorder" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                Background="Transparent"
                                CornerRadius="{TemplateBinding BorderCornerRadius}"
                                Margin="2">
                            <TextBlock x:Name="contentText" Text="{Binding Text}" HorizontalAlignment="Center" VerticalAlignment="Center"
                                       Foreground="#E9E9E9" Margin="4,0,4,0"
                                       RenderTransformOrigin="0.5,0.5">
                                <TextBlock.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="{Binding ScaleX,RelativeSource={RelativeSource Self}}"/>
                                    </TransformGroup>
                                </TextBlock.RenderTransform>
                            </TextBlock>
                        </Border>
                    </Grid>
                </Border>

                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" TargetName="contentBorder" Value="Transparent"/>
                        <Setter Property="Foreground" TargetName="contentText" Value="White"/>
                        <!--文本投影-->
                        <Setter Property="Effect" TargetName="contentBorder">
                            <Setter.Value>
                                <DropShadowEffect ShadowDepth="0" BlurRadius="0" Color="White"/>
                            </Setter.Value>
                        </Setter>

                        <Trigger.EnterActions>
                            <!--文本放大-->
                            <BeginStoryboard>
                                <Storyboard FillBehavior="HoldEnd">
                                    <DoubleAnimation Storyboard.TargetName="contentText"
                                                     Storyboard.TargetProperty="(TextBlock.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                                     To="1.05" 
                                                     Duration="0:0:0.1" />
                                </Storyboard>
                            </BeginStoryboard>

                            <!--文本投影呼吸-->
                            <BeginStoryboard x:Name="textblockAnm">
                                <Storyboard RepeatBehavior="Forever">
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Effect.BlurRadius" 
                                                                   Storyboard.TargetName="contentBorder">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:1.0" Value="8"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:1.5" Value="8"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:3.5" Value="0"/>
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>

                            <!--边框光照滚动-->
                            <BeginStoryboard x:Name="borderAnm">
                                <Storyboard RepeatBehavior="Forever">
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(BorderBrush).(GradientBrush.GradientStops)[0].(GradientStop.Color)" Storyboard.TargetName="border">
                                        <EasingColorKeyFrame KeyTime="0:0:0.0" Value="#FF23FFE1"/>
                                    </ColorAnimationUsingKeyFrames>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(BorderBrush).(GradientBrush.GradientStops)[1].(GradientStop.Color)" Storyboard.TargetName="border">
                                        <EasingColorKeyFrame KeyTime="0:0:0.0" Value="LightYellow"/>
                                    </ColorAnimationUsingKeyFrames>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(BorderBrush).(GradientBrush.GradientStops)[2].(GradientStop.Color)" Storyboard.TargetName="border">
                                        <EasingColorKeyFrame KeyTime="0:0:0.0" Value="#FFFF6BE1"/>
                                    </ColorAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(BorderBrush).(Transform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="border">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="360">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <ExponentialEase EasingMode="EaseInOut"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                        <EasingDoubleKeyFrame KeyTime="0:0:1.0" Value="180">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <ExponentialEase EasingMode="EaseInOut"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                        <EasingDoubleKeyFrame KeyTime="0:0:1.5" Value="0">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <ExponentialEase EasingMode="EaseInOut"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>

                            <!--边框抖动-->
                            <BeginStoryboard x:Name="borderAnm1">
                                <Storyboard FillBehavior="Stop">
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)" Storyboard.TargetName="border">
                                        <EasingDoubleKeyFrame KeyTime="0:0:1.0" Value="0">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <local:CustomEasingFunction EasingMode="EaseIn"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                        <EasingDoubleKeyFrame KeyTime="0:0:1.05" Value="-2">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <local:CustomEasingFunction EasingMode="EaseIn"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                        <EasingDoubleKeyFrame KeyTime="0:0:1.15" Value="2">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <local:CustomEasingFunction EasingMode="EaseIn"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                        <EasingDoubleKeyFrame KeyTime="0:0:1.25" Value="-2">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <local:CustomEasingFunction EasingMode="EaseIn"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                        <EasingDoubleKeyFrame KeyTime="0:0:1.35" Value="2">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <local:CustomEasingFunction EasingMode="EaseIn"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                        <EasingDoubleKeyFrame KeyTime="0:0:1.40" Value="0">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <local:CustomEasingFunction EasingMode="EaseIn"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <!--删除动画-->
                            <RemoveStoryboard BeginStoryboardName="textblockAnm"/>
                            <RemoveStoryboard BeginStoryboardName="borderAnm"/>
                            <RemoveStoryboard BeginStoryboardName="borderAnm1"/>

                            <!--文本复原-->
                            <BeginStoryboard>
                                <Storyboard FillBehavior="HoldEnd">
                                    <DoubleAnimation Storyboard.TargetProperty="(TextBlock.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                                     Storyboard.TargetName="contentText"
                                                     To="1" 
                                                     Duration="0:0:0.1"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.ExitActions>
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Trigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard FillBehavior="HoldEnd">
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" 
                                                     Storyboard.TargetName="path_ellipse">
                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:1.7" Value="0"/>
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Opacity" TargetName="border" Value="0.3"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Style.Resources>

        <!--选择样式-->
        <Style.Triggers>
            <DataTrigger Binding="{Binding Type, RelativeSource={RelativeSource Self}}" Value="{x:Static local:ButtonType.Noamal}">
                <Setter Property="Template" Value="{StaticResource Noamal}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="BorderCornerRadius" Value="2.5"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type, RelativeSource={RelativeSource Self}}" Value="{x:Static local:ButtonType.Custom}">
                <Setter Property="Template" Value="{StaticResource Custom}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="BorderCornerRadius" Value="2.5"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
</ResourceDictionary>